import React, { useEffect, useState } from 'react';
import api from '../api';
import { 
  Box, 
  Typography, 
  Table, 
  TableHead, 
  TableRow, 
  TableCell, 
  TableBody, 
  Paper, 
  Button,
  Alert,
  CircularProgress,
  Chip
} from '@mui/material';
import { Download as DownloadIcon, Receipt as ReceiptIcon } from '@mui/icons-material';

const Payslips = () => {
  const [payslips, setPayslips] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchMyPayslips = async () => {
    try {
      setLoading(true);
      setError(null);
      // Fetch only the current user's payslips
      const response = await api.get('/hr/payroll/my-payslips/');
      setPayslips(response.data);
    } catch (err) {
      console.error('Error fetching payslips:', err);
      setError('Failed to load payslips. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchMyPayslips();
  }, []);

  const handleDownloadPayslip = async (payslipId, period) => {
    try {
      const response = await api.get(`/hr/payroll/${payslipId}/download/`, {
        responseType: 'blob'
      });
      
      // Create blob link to download
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `payslip_${period}.pdf`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);
    } catch (err) {
      console.error('Error downloading payslip:', err);
      alert('Failed to download payslip. Please try again.');
    }
  };

  const getStatusColor = (status) => {
    switch (status?.toLowerCase()) {
      case 'paid':
        return 'success';
      case 'pending':
        return 'warning';
      case 'processing':
        return 'info';
      default:
        return 'default';
    }
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-GH', {
      style: 'currency',
      currency: 'GHS'
    }).format(amount || 0);
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <CircularProgress />
        <Typography variant="body1" sx={{ ml: 2 }}>Loading your payslips...</Typography>
      </Box>
    );
  }

  return (
    <Box>
      <Box display="flex" alignItems="center" mb={3}>
        <ReceiptIcon sx={{ mr: 1, color: 'primary.main' }} />
        <Typography variant="h4" component="h1">
          My Payslips
        </Typography>
      </Box>
      
      <Typography variant="body1" color="text.secondary" mb={3}>
        View and download your payslips. All payslips are generated by the HR department.
      </Typography>

      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}

      <Paper sx={{ mt: 3 }}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell><strong>Pay Period</strong></TableCell>
              <TableCell><strong>Gross Amount</strong></TableCell>
              <TableCell><strong>Net Amount</strong></TableCell>
              <TableCell><strong>Status</strong></TableCell>
              <TableCell><strong>Payment Date</strong></TableCell>
              <TableCell><strong>Actions</strong></TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {payslips.length === 0 && !loading && (
              <TableRow>
                <TableCell colSpan={6} align="center" sx={{ py: 4 }}>
                  <Typography variant="body1" color="text.secondary">
                    No payslips available yet. Payslips will appear here once HR processes your payroll.
                  </Typography>
                </TableCell>
              </TableRow>
            )}
            {payslips.map((payslip) => (
              <TableRow key={payslip.id} hover>
                <TableCell>
                  <Typography variant="body2" fontWeight="medium">
                    {payslip.period}
                  </Typography>
                </TableCell>
                <TableCell>
                  <Typography variant="body2">
                    {formatCurrency(payslip.gross_amount || payslip.amount)}
                  </Typography>
                </TableCell>
                <TableCell>
                  <Typography variant="body2" fontWeight="medium">
                    {formatCurrency(payslip.net_amount || payslip.amount)}
                  </Typography>
                </TableCell>
                <TableCell>
                  <Chip 
                    label={payslip.status || 'Pending'}
                    color={getStatusColor(payslip.status)}
                    size="small"
                  />
                </TableCell>
                <TableCell>
                  <Typography variant="body2">
                    {payslip.payment_date ? new Date(payslip.payment_date).toLocaleDateString() : 'Not paid yet'}
                  </Typography>
                </TableCell>
                <TableCell>
                  <Button
                    size="small"
                    variant="outlined"
                    startIcon={<DownloadIcon />}
                    onClick={() => handleDownloadPayslip(payslip.id, payslip.period)}
                    disabled={payslip.status?.toLowerCase() !== 'paid'}
                  >
                    Download PDF
                  </Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </Paper>

      {payslips.length > 0 && (
        <Box mt={2}>
          <Typography variant="caption" color="text.secondary">
            ðŸ’¡ You can only download payslips that have been marked as "Paid" by HR.
          </Typography>
        </Box>
      )}
    </Box>
  );
};

export default Payslips;
